#!/usr/bin/env ruby

require 'jira_tracker'
require 'yaml'

settings_file = "#{Dir.home}/.jira_tracker.yml"

if not(File.exists?(settings_file)) and ARGV[0] != 'initialize'
  puts "Perhaps you want to initialize jira_tracker first. Please do it with \"jira_tracker initialize\"."
  exit 1
end

if ARGV[0] == 'initialize'

  settings = {
    'site'        => 'https://your-jira-domain.com',
    'project_key' => 'MYP1',
    'username'    => 'your-jira-username',
    'password'    => 'your-jira-password',
    'time_track_issue_summary' => 'Time Tracking Ticket'
  }

  p "Please enter your jira site. (Example: #{settings['site']}):"
  settings['site']     = $stdin.gets.chomp
  p "Please enter project key. (Example: #{settings['project_key']}):"
  settings['project_key'] = [$stdin.gets.chomp]
  p 'Please enter your jira username:'
  settings['username'] = $stdin.gets.chomp
  p 'Please enter your jira password:'
  settings['password'] = $stdin.gets.chomp

  dict = File.exist?(settings_file) ? YAML.load_file(settings_file) : []
  # Migrate from previous config version
  dict.is_a?(Hash) && dict = [dict]

  # Join project keys for the same site
  e_settings = dict.index { |x| x['site'] == settings['site'] }
  if e_settings
    settings['project_key'] += (dict[e_settings]['project_key'] || [])
    dict[e_settings].merge!(settings)
  else
    dict << settings
  end

  File.write(settings_file, dict.to_yaml)
  p "Writing #{settings_file}"
  exit

end

issue      = ARGV[0]
time_spent = ARGV[1]
comment    = ARGV[2]

if issue.nil? or issue.length < 4
  p 'You forgot to specify issue/project or it is too short.'
  exit
end

if time_spent.nil? or time_spent.length < 2
  p 'You forgot to specify time spent or it is too short.'
  exit
end

JiraTracker.run(issue, time_spent, comment)
